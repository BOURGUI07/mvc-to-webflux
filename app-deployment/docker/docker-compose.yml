services:
  book-postgres:
    image: "postgres:14.12"
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - ./postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500m
    networks:
      - app-network


  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - app-network









  catalog-service:
    image: youness544/bookstore-catalog-service
    container_name: catalog-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_URL_R2DBC=r2dbc:postgresql://book-postgres:5432/catalog_db
      - DB_URL_FLYWAY=jdbc:postgresql://book-postgres:5432/catalog_db
      - SPRING_FLYWAY_ENABLED=true
      - DB_USERNAME=user
      - DB_PASSWORD=password
    ports:
      - "8081:8081"
      - "9081:9081" #actuator port
    restart: unless-stopped
    depends_on:
      book-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - app-network




  customer-service:
    image: youness544/bookstore-customer-service
    container_name: customer-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_URL_R2DBC=r2dbc:postgresql://book-postgres:5432/customer_db
      - DB_URL_FLYWAY=jdbc:postgresql://book-postgres:5432/customer_db
      - SPRING_FLYWAY_ENABLED=true
      - DB_USERNAME=user
      - DB_PASSWORD=password
    ports:
      - "8082:8082"
      - "9082:9082" #actuator port
    restart: unless-stopped
    depends_on:
      book-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - app-network




  shipping-service:
    image: youness544/bookstore-shipping-service
    container_name: shipping-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_URL_R2DBC=r2dbc:postgresql://book-postgres:5432/shipping_db
      - DB_URL_FLYWAY=jdbc:postgresql://book-postgres:5432/shipping_db
      - SPRING_FLYWAY_ENABLED=true
      - DB_USERNAME=user
      - DB_PASSWORD=password
    ports:
      - "8083:8083"
      - "9083:9083" #actuator port
    restart: unless-stopped
    depends_on:
      book-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - app-network
      -


  notification-service:
    image: youness544/bookstore-notification-service
    container_name: notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_URL_R2DBC=r2dbc:postgresql://book-postgres:5432/notification_db
      - DB_URL_FLYWAY=jdbc:postgresql://book-postgres:5432/notification_db
      - SPRING_FLYWAY_ENABLED=true
      - DB_USERNAME=user
      - DB_PASSWORD=password
    ports:
      - "8084:8084"
      - "9084:9084" #actuator port
    restart: unless-stopped
    depends_on:
      book-postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 700m
    networks:
      - app-network



  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - app-network








networks:
  app-network:
    driver: bridge
