############# Externalized Configuration ##############
catalog:
  service:
    name: catalog-service
    port: 8081
    actuator:
      port: 9081
    logging:
      level:
        root: INFO
        spring: INFO
        flyway: INFO
        r2dbc: INFO
        netty: INFO
        reactor: INFO
        reactive: INFO
        webflux: INFO
        service: INFO
    defaultPageSize: 10
    exceptionNotFound: https://api.bookstore.com/errors/not-found
    exceptionGeneral: https://api.bookstore.com/errors/general
    exceptionBadRequest: https://api.bookstore.com/errors/bad-request

db:
  url:
    r2dbc: r2dbc:postgresql://localhost:5432/catalog_db
    flyway: jdbc:postgresql://localhost:5432/catalog_db
  username: user
  password: password

############# SPRING CONFIGURATION ###############

spring:
  application:
    name: ${catalog.service.name:catalog-service}
  r2dbc:
    url: ${db.url.r2dbc:r2dbc:postgresql://localhost:5432/catalog_db}
    username: ${db.username:user}
    password: ${db.password:password}
    pool:
      max-size: 10
      initial-size: 5
      max-create-connection-time: 2s
  flyway:
    url: ${db.url.flyway:jdbc:postgresql://localhost:5432/catalog_db}
    user: ${db.username:user}
    password: ${db.password:password}
    enabled: true



############# SPRING CLOUD STREAM WITH KAFKA CONFIGURATION ###############
  cloud:
    function:
      definition: processor
    stream:
      default:
        producer:
          useNativeEncoding: true

      bindings:
        processor-in-0:
          destination: order-events
          group: "catalog-service-group"
        processor-out-0:
          destination: catalog-events
      kafka:
        binder:
          consumer-properties:
            "value.deserializer": org.springframework.kafka.support.serializer.JsonDeserializer
            "key.deserializer": org.apache.kafka.common.serialization.StringDeserializer
            "auto.offset.reset": "earliest"
            "spring.json.trusted.packages": "com.example.catalog_service.events"
          producer-properties:
            "value.serializer": org.springframework.kafka.support.serializer.JsonSerializer
            "key.serializer": org.apache.kafka.common.serialization.StringSerializer

########### SERVER CONFIGURATION #############

server:
  port: ${catalog.service.port:8081}
  shutdown: graceful
  netty:
    connection-timeout: 2s
    idle-timeout: 15s

############ ACTUATOR CONFIGURATION #############
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState
        readiness:
          include: readinessState
  info:
    git:
      enabled: true
      mode: full
  metrics:
    tags:
      application: ${spring.application.name}
  server:
    port: ${catalog.service.actuator.port:9081}

############## LOGGING CONFIGURATION ################
logging:
  level:
    root: ${catalog.service.logging.level.root:INFO}
    org.springframework: ${catalog.service.logging.level.spring:INFO}
    org.springframework.web.reactive: ${catalog.service.logging.level.reactive:INFO}
    org.springframework.web: ${catalog.service.logging.level.webflux:INFO}
    io.netty: ${catalog.service.logging.level.netty:INFO}
    io.r2dbc: ${catalog.service.logging.level.r2dbc:INFO}
    org.flywaydb: ${catalog.service.logging.level.flyway:INFO}
    reactor: ${catalog.service.logging.level.reactor:INFO}
    com.example.catalog_service: ${catalog.service.logging.level.service:INFO}




